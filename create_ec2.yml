---

# All the variables are present in var/var_alldetails.yml

- name: Create AWS EC2
  hosts: localhost
  connection: local
  vars_files:
  - var/var_alldetails.yml

  tasks:
  - name: create VPC        # create VPC using cidr block
    ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ vpc_cidr_block }}"
      region: "{{ aws_region }}"
      state: present
    register: ec2_vpc_net_out

  - name:               Set VPC ID in variable
    set_fact:
      vpc_id:           "{{ ec2_vpc_net_out.vpc.id }}"

#  - debug:
#      msg: vpc id  {{ ec2_vpc_net_out.vpc.id }}  vpc name {{ vpc_name }}

# Tow subnets shall be created.
# Two for AZ1, two for AZ2.
# For each AZ : one public, one private.

# Creating Subnets in AZ-1

  - name:               Create Public Subnet [AZ-1]
    ec2_vpc_subnet:
      state:            "present"
      vpc_id:           "{{ vpc_id }}"
      cidr:             "10.0.1.0/24"
      az:               "{{ aws_region }}a"
      region:           "{{ aws_region }}"
      resource_tags:
        Name:           "AZ-1 Public Subnet 1"
    register: my_public_subnet_az1

  - name:               Set Public Subnet ID in variable [AZ-1]
    set_fact:
      public_subnet_az1_id: "{{ my_public_subnet_az1.subnet.id }}"

#  - debug:
#      msg: public subnet "{{ my_public_subnet_az1.subnet.id }}"

  - name:               Create Private Subnet [AZ-1]
    ec2_vpc_subnet:
      state:            "present"
      vpc_id:           "{{ vpc_id }}"
      cidr:             "10.0.2.0/24"
      az:               "{{ aws_region }}a"
      region:           "{{ aws_region }}"
      resource_tags:
        Name:           "AZ-1 Private Subnet 1"
    register: my_private_subnet_az1

  - name:               Set Private Subnet ID in variable [AZ-1]
    set_fact:
      private_subnet_az1_id: "{{ my_private_subnet_az1.subnet.id }}"

# Creating Subnets in AZ-2

  - name:               Create Public Subnet [AZ-2]
    ec2_vpc_subnet:
      state:            "present"
      vpc_id:           "{{ vpc_id }}"
      cidr:             "10.0.11.0/24"
      az:               "{{ aws_region }}b"
      region:           "{{ aws_region }}"
      resource_tags:
        Name:           "AZ-2 Public Subnet 2"
    register: my_public_subnet_az2

  - name:               Set Public Subnet ID in variable [AZ-2]
    set_fact:
      public_subnet_az2_id: "{{ my_public_subnet_az2.subnet.id }}"

  - name:               Create Private Subnet [AZ-2]
    ec2_vpc_subnet:
      state:            "present"
      vpc_id:           "{{ vpc_id }}"
      cidr:             "10.0.12.0/24"
      az:               "{{ aws_region }}b"
      region:           "{{ aws_region }}"
      resource_tags:
        Name:           "AZ-2 Private Subnet 2"
    register: my_private_subnet_az2

  - name:               Set Private Subnet ID in variable [AZ-2]
    set_fact:
      private_subnet_az2_id: "{{ my_private_subnet_az2.subnet.id }}"

# Creating IGW to allow the traffic between VPC and internet.
# Using single IGW as Internet Gateway is external to our VPC,highly available

  - name:               Create Internet Gateway for VPC
    ec2_vpc_igw:
      vpc_id:           "{{ vpc_id }}"
      region:           "{{ aws_region }}"
      state:            "present"
      resource_tags:
        Name:           "Kunal IGW"
    register: my_vpc_igw

  - name:               Set Internet Gateway ID in variable
    set_fact:
      igw_id:           "{{ my_vpc_igw.gateway_id }}"

#  - debug:
#      msg: public subnet "{{  my_vpc_igw.gateway_id }}"

# Creating EIP for NAT gateway and then attachting NAT GW to public subnet.
# Here NAT GW is created and EIP is also assigned you can also create EIP first and then assign to NAT GW

  - name: Create NAT Gateway [AZ-1]
    ec2_vpc_nat_gateway:
      state: present
      subnet_id: "{{ public_subnet_az1_id }}"
      wait: yes
      region: "{{ aws_region }}"
      if_exist_do_not_create: true       # Create NAT GW if not present
    register: my_nat_gateway_z1

#  - name: Check gateway details
#    ec2_vpc_nat_gateway_facts:
#      region: "{{ aws_region }}"
#      filters:
#        subnet-id: "{{ public_subnet_az1_id }}"
#        state: ['available']
#    register: myngws

#  - name: Debugging the result
#    debug:
#      msg: "{{ myngws.result }}"


  - name: Set Nat Gateway ID in variable [AZ-1]
    set_fact:
      nat_gateway_az1_id: "{{ my_nat_gateway_z1.nat_gateway_id }}"

# Creating Route Tables
# Route table for Public Subnet. This route table is associtead with IGW

  - name: Set up public subnet route table
    ec2_vpc_route_table:
      vpc_id: "{{ vpc_id }}"
      region: "{{ aws_region }}"
      tags:
        Name: "{{ vpc_name }} Public RT"
      subnets:
        - "{{ public_subnet_az1_id }}"
        - "{{ public_subnet_az2_id }}"
      routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ igw_id }}"

# Creating Route Tables for Private Subnet

  - name: Set up private subnet route table [AZ-1] [AZ-1]
    ec2_vpc_route_table:
      vpc_id: "{{ vpc_id }}"
      region: "{{ aws_region }}"
      tags:
        Name: "{{ vpc_name }} Private RT"
      subnets:
        - "{{ private_subnet_az1_id }}"
        - "{{ private_subnet_az2_id }}"
      routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ nat_gateway_az1_id }}"

# Create the Security Groups.
# One SG to attach to public instances
# Second SG to attach to private instances.

  - name: Create Main Security Group
    ec2_group:
      name: "External SSH Access"
      description: "External SSH Access"
      vpc_id: "{{ vpc_id }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          from_port: "22"
          to_port: "22"
          cidr_ip: "{{ my_ip }}/32"
    register: my_main_sg

  - name: Set Main SG ID
    set_fact:
      main_sg_id: "{{ my_main_sg.group_id }}"

  - name: Create Private Security Group
    ec2_group:
      name: "Private Instances SG"
      description: "Private Instances SG"
      vpc_id: "{{ vpc_id }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          from_port: "22"
          to_port: "22"
          group_id: "{{ main_sg_id }}"
